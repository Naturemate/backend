name: Deploy Backend to EC2

# on:
#   push:
#     branches:
#       - main  # Trigger the workflow on push to the `main` branch

on:
  workflow_dispatch:  # Manual trigger for this workflow

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout Code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Set Up Docker Buildx
    - name: Set Up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Log in to DockerHub
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 4: Build and Push Docker Image
    - name: Build and Push Docker Image
      run: |
        echo "Building and pushing Docker image..."
        docker build -t pumplearn/backend:latest .
        docker push pumplearn/backend:latest

    # # Step 5: Get Runner's Public IP Address
    # - name: Get Runner IP Address
    #   id: ip
    #   uses: haythem/public-ip@v1.2
      
    # Step 6: Whitelist Runner's IP Address in EC2 Security Group
    - name: Whitelist Runner IP
    env:
      AWS_INSTANCE_SG_ID: ${{ secrets.EC2_SECURITY_GROUP_ID }}
      steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: get runner ip address
        id: ip
        uses: haythem/public-ip@v1.2
      - name: whitelist runner ip address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32

            
    # # Step 6: Whitelist Runner's IP Address in EC2 Security Group
    # - name: Whitelist Runner IP
    #   run: |
    #     echo "Whitelisting runner IP: ${{ steps.ip.outputs.ipv4 }}"
    #     aws ec2 authorize-security-group-ingress \
    #       --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
    #       --protocol tcp \
    #       --port 22 \
    #       --cidr ${{ steps.ip.outputs.ipv4 }}/32
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    # Step 7: Deploy to EC2 via SSH
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          echo "Stopping and removing existing Docker container..."
          docker stop backend || true
          docker rm backend || true

          echo "Pulling the latest Docker image..."
          docker pull pumplearn/backend:latest

          echo "Running the Docker container..."
          docker run -d --name backend -p 8080:8080 pumplearn/backend:latest

    # Step 8: Revoke Runner's IP Address from EC2 Security Group
    - name: Revoke Runner IP
      run: |
        echo "Revoking runner IP: ${{ steps.ip.outputs.ipv4 }}"
        aws ec2 revoke-security-group-ingress \
          --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
          --protocol tcp \
          --port 22 \
          --cidr ${{ steps.ip.outputs.ipv4 }}/32
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
